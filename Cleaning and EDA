{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Information about each column is here https://support.google.com/analytics/answer/3437719?hl=en"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "import ast "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>fullVisitorId</th>\n",
       "      <th>date</th>\n",
       "      <th>pageviews</th>\n",
       "      <th>timeOnSite</th>\n",
       "      <th>totalTransactionRevenue</th>\n",
       "      <th>trafficSource</th>\n",
       "      <th>device</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>9083435306748007208</td>\n",
       "      <td>2017-06-24</td>\n",
       "      <td>21</td>\n",
       "      <td>507</td>\n",
       "      <td>25980000</td>\n",
       "      <td>{'referralPath': None, 'campaign': '(not set)'...</td>\n",
       "      <td>{'browser': 'Chrome', 'browserVersion': 'not a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3858877675940046816</td>\n",
       "      <td>2017-06-24</td>\n",
       "      <td>25</td>\n",
       "      <td>965</td>\n",
       "      <td>9990000</td>\n",
       "      <td>{'referralPath': None, 'campaign': '(not set)'...</td>\n",
       "      <td>{'browser': 'Chrome', 'browserVersion': 'not a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>4394657957253741368</td>\n",
       "      <td>2017-06-24</td>\n",
       "      <td>26</td>\n",
       "      <td>1091</td>\n",
       "      <td>50950000</td>\n",
       "      <td>{'referralPath': None, 'campaign': '(not set)'...</td>\n",
       "      <td>{'browser': 'Chrome', 'browserVersion': 'not a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>9356220375344128149</td>\n",
       "      <td>2017-06-24</td>\n",
       "      <td>20</td>\n",
       "      <td>367</td>\n",
       "      <td>98460000</td>\n",
       "      <td>{'referralPath': None, 'campaign': '(not set)'...</td>\n",
       "      <td>{'browser': 'Chrome', 'browserVersion': 'not a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>9422501587775170340</td>\n",
       "      <td>2017-06-24</td>\n",
       "      <td>25</td>\n",
       "      <td>4528</td>\n",
       "      <td>30880000</td>\n",
       "      <td>{'referralPath': None, 'campaign': '(not set)'...</td>\n",
       "      <td>{'browser': 'Internet Explorer', 'browserVersi...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0        fullVisitorId       date  pageviews  timeOnSite  \\\n",
       "0           0  9083435306748007208 2017-06-24         21         507   \n",
       "1           1  3858877675940046816 2017-06-24         25         965   \n",
       "2           2  4394657957253741368 2017-06-24         26        1091   \n",
       "3           3  9356220375344128149 2017-06-24         20         367   \n",
       "4           4  9422501587775170340 2017-06-24         25        4528   \n",
       "\n",
       "   totalTransactionRevenue                                      trafficSource  \\\n",
       "0                 25980000  {'referralPath': None, 'campaign': '(not set)'...   \n",
       "1                  9990000  {'referralPath': None, 'campaign': '(not set)'...   \n",
       "2                 50950000  {'referralPath': None, 'campaign': '(not set)'...   \n",
       "3                 98460000  {'referralPath': None, 'campaign': '(not set)'...   \n",
       "4                 30880000  {'referralPath': None, 'campaign': '(not set)'...   \n",
       "\n",
       "                                              device  \n",
       "0  {'browser': 'Chrome', 'browserVersion': 'not a...  \n",
       "1  {'browser': 'Chrome', 'browserVersion': 'not a...  \n",
       "2  {'browser': 'Chrome', 'browserVersion': 'not a...  \n",
       "3  {'browser': 'Chrome', 'browserVersion': 'not a...  \n",
       "4  {'browser': 'Internet Explorer', 'browserVersi...  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"ga_df.csv\", parse_dates = [\"date\"])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0                 0\n",
       "fullVisitorId              0\n",
       "date                       0\n",
       "pageviews                  0\n",
       "timeOnSite                 0\n",
       "totalTransactionRevenue    0\n",
       "trafficSource              0\n",
       "device                     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Null values\n",
    "df.isna().sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0                          int64\n",
       "fullVisitorId                      uint64\n",
       "date                       datetime64[ns]\n",
       "pageviews                           int64\n",
       "timeOnSite                          int64\n",
       "totalTransactionRevenue             int64\n",
       "trafficSource                      object\n",
       "device                             object\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# types\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# chance column names to snake case\n",
    "\n",
    "def camel_to_snake(column):\n",
    "  name = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', column)\n",
    "  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', column).lower()\n",
    "\n",
    "df.columns = df.columns.to_series().apply(camel_to_snake)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unnamed: 0</th>\n",
       "      <th>full_visitor_id</th>\n",
       "      <th>date</th>\n",
       "      <th>pageviews</th>\n",
       "      <th>time_on_site</th>\n",
       "      <th>total_transaction_revenue</th>\n",
       "      <th>traffic_source</th>\n",
       "      <th>device</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>9083435306748007208</td>\n",
       "      <td>2017-06-24</td>\n",
       "      <td>21</td>\n",
       "      <td>507</td>\n",
       "      <td>25980000</td>\n",
       "      <td>{'referralPath': None, 'campaign': '(not set)'...</td>\n",
       "      <td>{'browser': 'Chrome', 'browserVersion': 'not a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3858877675940046816</td>\n",
       "      <td>2017-06-24</td>\n",
       "      <td>25</td>\n",
       "      <td>965</td>\n",
       "      <td>9990000</td>\n",
       "      <td>{'referralPath': None, 'campaign': '(not set)'...</td>\n",
       "      <td>{'browser': 'Chrome', 'browserVersion': 'not a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>4394657957253741368</td>\n",
       "      <td>2017-06-24</td>\n",
       "      <td>26</td>\n",
       "      <td>1091</td>\n",
       "      <td>50950000</td>\n",
       "      <td>{'referralPath': None, 'campaign': '(not set)'...</td>\n",
       "      <td>{'browser': 'Chrome', 'browserVersion': 'not a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>9356220375344128149</td>\n",
       "      <td>2017-06-24</td>\n",
       "      <td>20</td>\n",
       "      <td>367</td>\n",
       "      <td>98460000</td>\n",
       "      <td>{'referralPath': None, 'campaign': '(not set)'...</td>\n",
       "      <td>{'browser': 'Chrome', 'browserVersion': 'not a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>9422501587775170340</td>\n",
       "      <td>2017-06-24</td>\n",
       "      <td>25</td>\n",
       "      <td>4528</td>\n",
       "      <td>30880000</td>\n",
       "      <td>{'referralPath': None, 'campaign': '(not set)'...</td>\n",
       "      <td>{'browser': 'Internet Explorer', 'browserVersi...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   unnamed: 0      full_visitor_id       date  pageviews  time_on_site  \\\n",
       "0           0  9083435306748007208 2017-06-24         21           507   \n",
       "1           1  3858877675940046816 2017-06-24         25           965   \n",
       "2           2  4394657957253741368 2017-06-24         26          1091   \n",
       "3           3  9356220375344128149 2017-06-24         20           367   \n",
       "4           4  9422501587775170340 2017-06-24         25          4528   \n",
       "\n",
       "   total_transaction_revenue  \\\n",
       "0                   25980000   \n",
       "1                    9990000   \n",
       "2                   50950000   \n",
       "3                   98460000   \n",
       "4                   30880000   \n",
       "\n",
       "                                      traffic_source  \\\n",
       "0  {'referralPath': None, 'campaign': '(not set)'...   \n",
       "1  {'referralPath': None, 'campaign': '(not set)'...   \n",
       "2  {'referralPath': None, 'campaign': '(not set)'...   \n",
       "3  {'referralPath': None, 'campaign': '(not set)'...   \n",
       "4  {'referralPath': None, 'campaign': '(not set)'...   \n",
       "\n",
       "                                              device  \n",
       "0  {'browser': 'Chrome', 'browserVersion': 'not a...  \n",
       "1  {'browser': 'Chrome', 'browserVersion': 'not a...  \n",
       "2  {'browser': 'Chrome', 'browserVersion': 'not a...  \n",
       "3  {'browser': 'Chrome', 'browserVersion': 'not a...  \n",
       "4  {'browser': 'Internet Explorer', 'browserVersi...  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Cleaning the traffic source column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# converting string to dictionary\n",
    "df.traffic_source = df.traffic_source.apply(lambda x: ast.literal_eval(x) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def source_medium(row):\n",
    "    source = row.get(\"source\")\n",
    "    medium = row.get(\"medium\")\n",
    "    return source + \" \" + medium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating column\n",
    "df[\"source_medium\"] = df.traffic_source.apply(source_medium).str.replace(\"(\",\"\").str.replace(\")\",\"\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Cleaning the device column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.device = df.device.apply(lambda x: ast.literal_eval(x) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def device(row):\n",
    "    return row.get(\"deviceCategory\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"device_cat\"] = df.device.apply(device)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop columns\n",
    "df.drop([\"traffic_source\", \"device\"], axis=1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Cleaning total_transaction_revenue column\n",
    "Total transaction revenue, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize_transaction(transaction):\n",
    "    divide = 1000000\n",
    "    return transaction / divide"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.total_transaction_revenue = df.total_transaction_revenue.apply(normalize_transaction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Duplicates or frequent buyers\n",
    "There are approximately 122 cases of customers (identified with full_visitor_id) that visited the website more than once and purchased a product. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Full visitor ID see duplicate entries to understand the nature of it\n",
    "frequent_buyers = df[df[\"full_visitor_id\"].isin(df[\"full_visitor_id\"][df[\"full_visitor_id\"].duplicated()])].sort_values(by=\"full_visitor_id\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exploratory Data Analysis\n",
    "Questions\n",
    "\n",
    "- Seasons / dates where revenue is higher\n",
    "- what devices bring more revenue\n",
    "- what sources/ medium bring more revenue\n",
    "- is there anythin in common or different with the customers who purchase more than once\n",
    "- are there channels that bring high expensers? \n",
    "- is there any correlation between pageviews and revenue?\n",
    "- is there any correlation between time onsite and revenue\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Seasonality / Trend"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see below, the middle of July registered the highest transaction value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11c703978>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.pivot_table(df, index = [\"date\"], values=[\"total_transaction_revenue\"], aggfunc = np.sum).plot(kind=\"line\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Type of Device and Revenue\n",
    "\n",
    "Desktop is still one one of the biggest sources of revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11c7f7d30>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.pivot_table(df, index = [\"device_cat\"], values=[\"total_transaction_revenue\"], aggfunc = np.sum).plot(kind=\"bar\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Source and Medium and revenue\n",
    "\n",
    "The top five medium source and medium are displayed below, with direct traffic being the one that generates more revenue. This might indicate some issue with traffic tagging."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11caf1668>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.pivot_table(df, index = [\"source_medium\"], values=[\"total_transaction_revenue\"], aggfunc = np.sum).sort_values(by=\"total_transaction_revenue\", ascending= False).head().plot(kind=\"bar\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
